// Code generated by raf using Material interface.
// - Namespace: 01987547fc6c72ecb453bd2736bd4ea0.
// - Entity Name: procedure.
// - Entity ID: 102019a1d9558e97cd489bde6a54384d427.
// - Entity Version: 102019a1dd7e1a171efb6467029843c5d0e.
// - Task ID: 68fd664019a61d1ab43a9dbc.
// - Task Root ID: 68fd5421128d32154869dba1.

import { DataType } from "./common";
import type { Value, Page, Index, Filter, Sort, Data } from "./common";
import { DataStoreClient, CreateData, CreateValue, ParseValue } from "./client";










/**
 * Interface for ProcedureModel
 * `id`, `data_creator`, `data_updater`, `create_time`, `update_time` should not be set when INSERTING data since backend will fill it automatically.
 * `id` should keep the original value when setting (updating) data.
 * `data_creator` and `data_updater` are read-only strings (user id) representing the creator and updater of the data record.
 * `create_time` and `update_time` are read-only strings in the format of timestamp (10-digit).
 */
export interface ProcedureModel {
  id: string;
  data_creator: string;
  data_updater: string;
  create_time: string;
  update_time: string;
  name: string;
  description?: string | null;
  duration_minutes: number;
  requires_recovery_time: boolean;
  recovery_hours?: number | null;
}

/**
 * ORM class for Procedure entity.
 * It uses Singleton pattern to prevent re-initialization.
 */
export class ProcedureORM {
  private static instance: ProcedureORM | null = null;
  protected client: DataStoreClient;
  protected namespace: string;
  protected entityId: string;
  protected entityName: string;
  protected entityVersion: string;
  protected taskId: string;
  protected taskRootId: string;

  private constructor() {
    this.client = DataStoreClient.getInstance();
    this.namespace = '01987547fc6c72ecb453bd2736bd4ea0';
    this.entityId = '102019a1d9558e97cd489bde6a54384d427';
    this.entityName = 'procedure';
    this.entityVersion = '102019a1dd7e1a171efb6467029843c5d0e';
    this.taskId = '68fd664019a61d1ab43a9dbc';
    this.taskRootId = '68fd5421128d32154869dba1';
  }

  /**
   * Get singleton instance of ProcedureORM
   */
  public static getInstance(): ProcedureORM {
    if (!ProcedureORM.instance) {
      ProcedureORM.instance = new ProcedureORM();
    }
    
    return ProcedureORM.instance;
  }

  /**
   * Get all Procedure records
   * This returns all data without pagination.
   * To query data with page and filter conditions, use `list*()` instead.
   */
  async getAllProcedure(): Promise<ProcedureModel[]> {
    const response = await this.client.all({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      format: {
        structured: true
      }
    });
    return this.resultToData(response.data?.values || []);
  }

  /**
   * Insert (create) new Procedure record(s)
   * DO NOT SET `id`, `data_creator`, `data_updater`, `create_time` and `update_time` since backend will fill it automatically.
   * It will respond the inserted record(s), with `id`, `data_creator`, `data_updater`, `create_time` and `update_time` filled by backend.
   */
  async insertProcedure(data: ProcedureModel[]): Promise<ProcedureModel[]> {
    const structured = data.map((item) => CreateData(ProcedureModelToValues(item)));
    const response = await this.client.insert({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      batch: structured,
      format: {
        structured: true
      }
    });
    return this.resultToData(response.data?.values || []);
  }

  /**
   * Purge all Procedure records
   */
  async purgeAllProcedure(): Promise<void> {
    await this.client.purge({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      format: {
        structured: true
      }
    });
  }

  /**
   * List Procedure records with filters
   * This function provides search capabilities like filtering, sorting, pagination.
   */
  async listProcedure(filter?: Filter, sort?: Sort, paginate?: Page): Promise<[ProcedureModel[], Page]> {
    const response = await this.client.list({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      filter: filter,
      sort: sort,
      paginate: paginate,
      format: {
        structured: true
      }
    });
    return [this.resultToData(response.data?.values || []), response.data?.page || { number: 0, size: 0 }];
  }


  /**
   * Get procedure by Id index
   * This function gets data by index.
   */
  async getProcedureById(
    id: string,
  ): Promise<ProcedureModel[]> {
    const index = createIndexId(
      id
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) procedure by Id index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setProcedureById(
    id: string,
    data: ProcedureModel
  ): Promise<ProcedureModel[]> {
    const index = createIndexId(
      id
    );

    const values = ProcedureModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete procedure by Id index
   */
  async deleteProcedureById(
    id: string
  ): Promise<void> {
    const index = createIndexId(
      id
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get procedure by DataCreator index
   * This function gets data by index.
   */
  async getProcedureByDataCreator(
    data_creator: string,
  ): Promise<ProcedureModel[]> {
    const index = createIndexDataCreator(
      data_creator
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) procedure by DataCreator index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setProcedureByDataCreator(
    data_creator: string,
    data: ProcedureModel
  ): Promise<ProcedureModel[]> {
    const index = createIndexDataCreator(
      data_creator
    );

    const values = ProcedureModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete procedure by DataCreator index
   */
  async deleteProcedureByDataCreator(
    data_creator: string
  ): Promise<void> {
    const index = createIndexDataCreator(
      data_creator
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get procedure by DataUpdater index
   * This function gets data by index.
   */
  async getProcedureByDataUpdater(
    data_updater: string,
  ): Promise<ProcedureModel[]> {
    const index = createIndexDataUpdater(
      data_updater
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) procedure by DataUpdater index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setProcedureByDataUpdater(
    data_updater: string,
    data: ProcedureModel
  ): Promise<ProcedureModel[]> {
    const index = createIndexDataUpdater(
      data_updater
    );

    const values = ProcedureModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete procedure by DataUpdater index
   */
  async deleteProcedureByDataUpdater(
    data_updater: string
  ): Promise<void> {
    const index = createIndexDataUpdater(
      data_updater
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get procedure by Name index
   * This function gets data by index.
   */
  async getProcedureByName(
    name: string,
  ): Promise<ProcedureModel[]> {
    const index = createIndexName(
      name
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) procedure by Name index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setProcedureByName(
    name: string,
    data: ProcedureModel
  ): Promise<ProcedureModel[]> {
    const index = createIndexName(
      name
    );

    const values = ProcedureModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete procedure by Name index
   */
  async deleteProcedureByName(
    name: string
  ): Promise<void> {
    const index = createIndexName(
      name
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }

  /**
   * Convert result data to ProcedureModel data array
   */
  private resultToData(values: Data[]): ProcedureModel[] {
    return values.map((item: Data) => {
      if (item.structured && item.structured.length > 0) {
        return ProcedureModelFromValues(item.structured);
      }

      if (item.serialized) {
        try {
          const parsedData = JSON.parse(item.serialized) as ProcedureModel;
          return parsedData;
        } catch (error) {
          console.error('Error parsing serialized ProcedureModel data: ', error, item.serialized);
          return null;
        }
      }

      return null;
    }).filter((item): item is ProcedureModel => item !== null);
  }
}

/**
 * Convert ProcedureModel data to Value array
 */
function ProcedureModelToValues(data: ProcedureModel): Value[] {
  const fieldMappings = [
    { key: 'id', type: DataType.string, defaultValue: '' },
    { key: 'data_creator', type: DataType.string, defaultValue: '' },
    { key: 'data_updater', type: DataType.string, defaultValue: '' },
    { key: 'create_time', type: DataType.string, defaultValue: '' },
    { key: 'update_time', type: DataType.string, defaultValue: '' },
    { key: 'name', type: DataType.string, defaultValue: '' },
    { key: 'description', type: DataType.string, defaultValue: null },
    { key: 'duration_minutes', type: DataType.number, defaultValue: 0 },
    { key: 'requires_recovery_time', type: DataType.boolean, defaultValue: false },
    { key: 'recovery_hours', type: DataType.number, defaultValue: null },
  ];

  return fieldMappings.map(({ key, type, defaultValue }) => {
    const value = data[key as keyof ProcedureModel] ?? defaultValue;
    return CreateValue(type, value, key);
  });
}

/**
 * Convert Value array to ProcedureModel data
 */
function ProcedureModelFromValues(values: Value[]): ProcedureModel {
  const data: Partial<ProcedureModel> = {};
  
  for (const value of values) {
    if (!value.name) continue;
    
    switch (value.name) {
      case 'id':
        data.id = ParseValue(value, DataType.string) as string;
        break;
      case 'data_creator':
        data.data_creator = ParseValue(value, DataType.string) as string;
        break;
      case 'data_updater':
        data.data_updater = ParseValue(value, DataType.string) as string;
        break;
      case 'create_time':
        data.create_time = ParseValue(value, DataType.string) as string;
        break;
      case 'update_time':
        data.update_time = ParseValue(value, DataType.string) as string;
        break;
      case 'name':
        data.name = ParseValue(value, DataType.string) as string;
        break;
      case 'description':
        data.description = ParseValue(value, DataType.string) as string | null;
        break;
      case 'duration_minutes':
        data.duration_minutes = ParseValue(value, DataType.number) as number;
        break;
      case 'requires_recovery_time':
        data.requires_recovery_time = ParseValue(value, DataType.boolean) as boolean;
        break;
      case 'recovery_hours':
        data.recovery_hours = ParseValue(value, DataType.number) as number | null;
        break;
    }
  }
  
  return data as ProcedureModel;
}


/**
 * Create index for Id fields
 */
function createIndexId(
  id: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, id, 'id'),
  ];

  return {
    fields: ['id'],
    values
  };
}
/**
 * Create index for DataCreator fields
 */
function createIndexDataCreator(
  data_creator: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, data_creator, 'data_creator'),
  ];

  return {
    fields: ['data_creator'],
    values
  };
}
/**
 * Create index for DataUpdater fields
 */
function createIndexDataUpdater(
  data_updater: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, data_updater, 'data_updater'),
  ];

  return {
    fields: ['data_updater'],
    values
  };
}
/**
 * Create index for Name fields
 */
function createIndexName(
  name: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, name, 'name'),
  ];

  return {
    fields: ['name'],
    values
  };
}

export default ProcedureORM;