// Code generated by raf using Material interface.
// - Namespace: 01987547fc6c72ecb453bd2736bd4ea0.
// - Entity Name: patient.
// - Entity ID: 102019a1d9558e979df8f14be80abc6278d.
// - Entity Version: 102019a1dd7e1a171efb6467029843c5d0e.
// - Task ID: 68fd664019a61d1ab43a9dbc.
// - Task Root ID: 68fd5421128d32154869dba1.

import { DataType } from "./common";
import type { Value, Page, Index, Filter, Sort, Data } from "./common";
import { DataStoreClient, CreateData, CreateValue, ParseValue } from "./client";







/**
 * Enumeration for PatientTrialPhase
 */
export enum PatientTrialPhase {
  Unspecified = 0,
  Phase1 = 1,
  Phase2 = 2,
  Phase3 = 3,
  Phase4 = 4,
}



/**
 * Interface for PatientModel
 * `id`, `data_creator`, `data_updater`, `create_time`, `update_time` should not be set when INSERTING data since backend will fill it automatically.
 * `id` should keep the original value when setting (updating) data.
 * `data_creator` and `data_updater` are read-only strings (user id) representing the creator and updater of the data record.
 * `create_time` and `update_time` are read-only strings in the format of timestamp (10-digit).
 */
export interface PatientModel {
  id: string;
  data_creator: string;
  data_updater: string;
  create_time: string;
  update_time: string;
  first_name: string;
  last_name: string;
  email: string;
  phone?: string | null;
  trial_phase: PatientTrialPhase;
  enrollment_date: string;
  completion_percentage: number;
}

/**
 * ORM class for Patient entity.
 * It uses Singleton pattern to prevent re-initialization.
 */
export class PatientORM {
  private static instance: PatientORM | null = null;
  protected client: DataStoreClient;
  protected namespace: string;
  protected entityId: string;
  protected entityName: string;
  protected entityVersion: string;
  protected taskId: string;
  protected taskRootId: string;

  private constructor() {
    this.client = DataStoreClient.getInstance();
    this.namespace = '01987547fc6c72ecb453bd2736bd4ea0';
    this.entityId = '102019a1d9558e979df8f14be80abc6278d';
    this.entityName = 'patient';
    this.entityVersion = '102019a1dd7e1a171efb6467029843c5d0e';
    this.taskId = '68fd664019a61d1ab43a9dbc';
    this.taskRootId = '68fd5421128d32154869dba1';
  }

  /**
   * Get singleton instance of PatientORM
   */
  public static getInstance(): PatientORM {
    if (!PatientORM.instance) {
      PatientORM.instance = new PatientORM();
    }
    
    return PatientORM.instance;
  }

  /**
   * Get all Patient records
   * This returns all data without pagination.
   * To query data with page and filter conditions, use `list*()` instead.
   */
  async getAllPatient(): Promise<PatientModel[]> {
    const response = await this.client.all({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      format: {
        structured: true
      }
    });
    return this.resultToData(response.data?.values || []);
  }

  /**
   * Insert (create) new Patient record(s)
   * DO NOT SET `id`, `data_creator`, `data_updater`, `create_time` and `update_time` since backend will fill it automatically.
   * It will respond the inserted record(s), with `id`, `data_creator`, `data_updater`, `create_time` and `update_time` filled by backend.
   */
  async insertPatient(data: PatientModel[]): Promise<PatientModel[]> {
    const structured = data.map((item) => CreateData(PatientModelToValues(item)));
    const response = await this.client.insert({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      batch: structured,
      format: {
        structured: true
      }
    });
    return this.resultToData(response.data?.values || []);
  }

  /**
   * Purge all Patient records
   */
  async purgeAllPatient(): Promise<void> {
    await this.client.purge({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      format: {
        structured: true
      }
    });
  }

  /**
   * List Patient records with filters
   * This function provides search capabilities like filtering, sorting, pagination.
   */
  async listPatient(filter?: Filter, sort?: Sort, paginate?: Page): Promise<[PatientModel[], Page]> {
    const response = await this.client.list({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      filter: filter,
      sort: sort,
      paginate: paginate,
      format: {
        structured: true
      }
    });
    return [this.resultToData(response.data?.values || []), response.data?.page || { number: 0, size: 0 }];
  }


  /**
   * Get patient by Id index
   * This function gets data by index.
   */
  async getPatientById(
    id: string,
  ): Promise<PatientModel[]> {
    const index = createIndexId(
      id
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) patient by Id index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setPatientById(
    id: string,
    data: PatientModel
  ): Promise<PatientModel[]> {
    const index = createIndexId(
      id
    );

    const values = PatientModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete patient by Id index
   */
  async deletePatientById(
    id: string
  ): Promise<void> {
    const index = createIndexId(
      id
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get patient by DataCreator index
   * This function gets data by index.
   */
  async getPatientByDataCreator(
    data_creator: string,
  ): Promise<PatientModel[]> {
    const index = createIndexDataCreator(
      data_creator
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) patient by DataCreator index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setPatientByDataCreator(
    data_creator: string,
    data: PatientModel
  ): Promise<PatientModel[]> {
    const index = createIndexDataCreator(
      data_creator
    );

    const values = PatientModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete patient by DataCreator index
   */
  async deletePatientByDataCreator(
    data_creator: string
  ): Promise<void> {
    const index = createIndexDataCreator(
      data_creator
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get patient by DataUpdater index
   * This function gets data by index.
   */
  async getPatientByDataUpdater(
    data_updater: string,
  ): Promise<PatientModel[]> {
    const index = createIndexDataUpdater(
      data_updater
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) patient by DataUpdater index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setPatientByDataUpdater(
    data_updater: string,
    data: PatientModel
  ): Promise<PatientModel[]> {
    const index = createIndexDataUpdater(
      data_updater
    );

    const values = PatientModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete patient by DataUpdater index
   */
  async deletePatientByDataUpdater(
    data_updater: string
  ): Promise<void> {
    const index = createIndexDataUpdater(
      data_updater
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get patient by Email index
   * This function gets data by index.
   */
  async getPatientByEmail(
    email: string,
  ): Promise<PatientModel[]> {
    const index = createIndexEmail(
      email
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) patient by Email index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setPatientByEmail(
    email: string,
    data: PatientModel
  ): Promise<PatientModel[]> {
    const index = createIndexEmail(
      email
    );

    const values = PatientModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete patient by Email index
   */
  async deletePatientByEmail(
    email: string
  ): Promise<void> {
    const index = createIndexEmail(
      email
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get patient by Phone index
   * This function gets data by index.
   */
  async getPatientByPhone(
    phone: string,
  ): Promise<PatientModel[]> {
    const index = createIndexPhone(
      phone
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) patient by Phone index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setPatientByPhone(
    phone: string,
    data: PatientModel
  ): Promise<PatientModel[]> {
    const index = createIndexPhone(
      phone
    );

    const values = PatientModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete patient by Phone index
   */
  async deletePatientByPhone(
    phone: string
  ): Promise<void> {
    const index = createIndexPhone(
      phone
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get patient by TrialPhase index
   * This function gets data by index.
   */
  async getPatientByTrialPhase(
    trial_phase: PatientTrialPhase,
  ): Promise<PatientModel[]> {
    const index = createIndexTrialPhase(
      trial_phase
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) patient by TrialPhase index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setPatientByTrialPhase(
    trial_phase: PatientTrialPhase,
    data: PatientModel
  ): Promise<PatientModel[]> {
    const index = createIndexTrialPhase(
      trial_phase
    );

    const values = PatientModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete patient by TrialPhase index
   */
  async deletePatientByTrialPhase(
    trial_phase: PatientTrialPhase
  ): Promise<void> {
    const index = createIndexTrialPhase(
      trial_phase
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }

  /**
   * Convert result data to PatientModel data array
   */
  private resultToData(values: Data[]): PatientModel[] {
    return values.map((item: Data) => {
      if (item.structured && item.structured.length > 0) {
        return PatientModelFromValues(item.structured);
      }

      if (item.serialized) {
        try {
          const parsedData = JSON.parse(item.serialized) as PatientModel;
          return parsedData;
        } catch (error) {
          console.error('Error parsing serialized PatientModel data: ', error, item.serialized);
          return null;
        }
      }

      return null;
    }).filter((item): item is PatientModel => item !== null);
  }
}

/**
 * Convert PatientModel data to Value array
 */
function PatientModelToValues(data: PatientModel): Value[] {
  const fieldMappings = [
    { key: 'id', type: DataType.string, defaultValue: '' },
    { key: 'data_creator', type: DataType.string, defaultValue: '' },
    { key: 'data_updater', type: DataType.string, defaultValue: '' },
    { key: 'create_time', type: DataType.string, defaultValue: '' },
    { key: 'update_time', type: DataType.string, defaultValue: '' },
    { key: 'first_name', type: DataType.string, defaultValue: '' },
    { key: 'last_name', type: DataType.string, defaultValue: '' },
    { key: 'email', type: DataType.string, defaultValue: '' },
    { key: 'phone', type: DataType.string, defaultValue: null },
    { key: 'trial_phase', type: DataType.enumeration, defaultValue: 0 },
    { key: 'enrollment_date', type: DataType.string, defaultValue: '' },
    { key: 'completion_percentage', type: DataType.number, defaultValue: 0 },
  ];

  return fieldMappings.map(({ key, type, defaultValue }) => {
    const value = data[key as keyof PatientModel] ?? defaultValue;
    return CreateValue(type, value, key);
  });
}

/**
 * Convert Value array to PatientModel data
 */
function PatientModelFromValues(values: Value[]): PatientModel {
  const data: Partial<PatientModel> = {};
  
  for (const value of values) {
    if (!value.name) continue;
    
    switch (value.name) {
      case 'id':
        data.id = ParseValue(value, DataType.string) as string;
        break;
      case 'data_creator':
        data.data_creator = ParseValue(value, DataType.string) as string;
        break;
      case 'data_updater':
        data.data_updater = ParseValue(value, DataType.string) as string;
        break;
      case 'create_time':
        data.create_time = ParseValue(value, DataType.string) as string;
        break;
      case 'update_time':
        data.update_time = ParseValue(value, DataType.string) as string;
        break;
      case 'first_name':
        data.first_name = ParseValue(value, DataType.string) as string;
        break;
      case 'last_name':
        data.last_name = ParseValue(value, DataType.string) as string;
        break;
      case 'email':
        data.email = ParseValue(value, DataType.string) as string;
        break;
      case 'phone':
        data.phone = ParseValue(value, DataType.string) as string | null;
        break;
      case 'trial_phase':
        data.trial_phase = ParseValue(value, DataType.enumeration) as PatientTrialPhase;
        break;
      case 'enrollment_date':
        data.enrollment_date = ParseValue(value, DataType.string) as string;
        break;
      case 'completion_percentage':
        data.completion_percentage = ParseValue(value, DataType.number) as number;
        break;
    }
  }
  
  return data as PatientModel;
}


/**
 * Create index for Id fields
 */
function createIndexId(
  id: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, id, 'id'),
  ];

  return {
    fields: ['id'],
    values
  };
}
/**
 * Create index for DataCreator fields
 */
function createIndexDataCreator(
  data_creator: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, data_creator, 'data_creator'),
  ];

  return {
    fields: ['data_creator'],
    values
  };
}
/**
 * Create index for DataUpdater fields
 */
function createIndexDataUpdater(
  data_updater: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, data_updater, 'data_updater'),
  ];

  return {
    fields: ['data_updater'],
    values
  };
}
/**
 * Create index for Email fields
 */
function createIndexEmail(
  email: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, email, 'email'),
  ];

  return {
    fields: ['email'],
    values
  };
}
/**
 * Create index for Phone fields
 */
function createIndexPhone(
  phone: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, phone, 'phone'),
  ];

  return {
    fields: ['phone'],
    values
  };
}
/**
 * Create index for TrialPhase fields
 */
function createIndexTrialPhase(
  trial_phase: PatientTrialPhase
): Index {
  const values: Value[] = [
    CreateValue(DataType.enumeration, trial_phase, 'trial_phase'),
  ];

  return {
    fields: ['trial_phase'],
    values
  };
}

export default PatientORM;