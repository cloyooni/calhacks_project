// Code generated by raf using Material interface.
// - Namespace: 01987547fc6c72ecb453bd2736bd4ea0.
// - Entity Name: appointment.
// - Entity ID: 102019a1d9558ea7218911352e1da4deb5f.
// - Entity Version: 102019a1dd7e1a171efb6467029843c5d0e.
// - Task ID: 68fd664019a61d1ab43a9dbc.
// - Task Root ID: 68fd5421128d32154869dba1.

import { DataType } from "./common";
import type { Value, Page, Index, Filter, Sort, Data } from "./common";
import { DataStoreClient, CreateData, CreateValue, ParseValue } from "./client";







/**
 * Enumeration for AppointmentStatus
 */
export enum AppointmentStatus {
  Unspecified = 0,
  Scheduled = 1,
  Completed = 2,
  Cancelled = 3,
  NoShow = 4,
}



/**
 * Interface for AppointmentModel
 * `id`, `data_creator`, `data_updater`, `create_time`, `update_time` should not be set when INSERTING data since backend will fill it automatically.
 * `id` should keep the original value when setting (updating) data.
 * `data_creator` and `data_updater` are read-only strings (user id) representing the creator and updater of the data record.
 * `create_time` and `update_time` are read-only strings in the format of timestamp (10-digit).
 */
export interface AppointmentModel {
  id: string;
  data_creator: string;
  data_updater: string;
  create_time: string;
  update_time: string;
  time_window_id: string;
  patient_id: string;
  clinician_id: string;
  procedure_ids: string[];
  scheduled_date: string;
  duration_minutes: number;
  location?: string | null;
  notes?: string | null;
  status: AppointmentStatus;
  google_calendar_event_id?: string | null;
  reminders_sent?: string | null;
}

/**
 * ORM class for Appointment entity.
 * It uses Singleton pattern to prevent re-initialization.
 */
export class AppointmentORM {
  private static instance: AppointmentORM | null = null;
  protected client: DataStoreClient;
  protected namespace: string;
  protected entityId: string;
  protected entityName: string;
  protected entityVersion: string;
  protected taskId: string;
  protected taskRootId: string;

  private constructor() {
    this.client = DataStoreClient.getInstance();
    this.namespace = '01987547fc6c72ecb453bd2736bd4ea0';
    this.entityId = '102019a1d9558ea7218911352e1da4deb5f';
    this.entityName = 'appointment';
    this.entityVersion = '102019a1dd7e1a171efb6467029843c5d0e';
    this.taskId = '68fd664019a61d1ab43a9dbc';
    this.taskRootId = '68fd5421128d32154869dba1';
  }

  /**
   * Get singleton instance of AppointmentORM
   */
  public static getInstance(): AppointmentORM {
    if (!AppointmentORM.instance) {
      AppointmentORM.instance = new AppointmentORM();
    }
    
    return AppointmentORM.instance;
  }

  /**
   * Get all Appointment records
   * This returns all data without pagination.
   * To query data with page and filter conditions, use `list*()` instead.
   */
  async getAllAppointment(): Promise<AppointmentModel[]> {
    const response = await this.client.all({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      format: {
        structured: true
      }
    });
    return this.resultToData(response.data?.values || []);
  }

  /**
   * Insert (create) new Appointment record(s)
   * DO NOT SET `id`, `data_creator`, `data_updater`, `create_time` and `update_time` since backend will fill it automatically.
   * It will respond the inserted record(s), with `id`, `data_creator`, `data_updater`, `create_time` and `update_time` filled by backend.
   */
  async insertAppointment(data: AppointmentModel[]): Promise<AppointmentModel[]> {
    const structured = data.map((item) => CreateData(AppointmentModelToValues(item)));
    const response = await this.client.insert({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      batch: structured,
      format: {
        structured: true
      }
    });
    return this.resultToData(response.data?.values || []);
  }

  /**
   * Purge all Appointment records
   */
  async purgeAllAppointment(): Promise<void> {
    await this.client.purge({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      format: {
        structured: true
      }
    });
  }

  /**
   * List Appointment records with filters
   * This function provides search capabilities like filtering, sorting, pagination.
   */
  async listAppointment(filter?: Filter, sort?: Sort, paginate?: Page): Promise<[AppointmentModel[], Page]> {
    const response = await this.client.list({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      filter: filter,
      sort: sort,
      paginate: paginate,
      format: {
        structured: true
      }
    });
    return [this.resultToData(response.data?.values || []), response.data?.page || { number: 0, size: 0 }];
  }


  /**
   * Get appointment by Id index
   * This function gets data by index.
   */
  async getAppointmentById(
    id: string,
  ): Promise<AppointmentModel[]> {
    const index = createIndexId(
      id
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) appointment by Id index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setAppointmentById(
    id: string,
    data: AppointmentModel
  ): Promise<AppointmentModel[]> {
    const index = createIndexId(
      id
    );

    const values = AppointmentModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete appointment by Id index
   */
  async deleteAppointmentById(
    id: string
  ): Promise<void> {
    const index = createIndexId(
      id
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get appointment by DataCreator index
   * This function gets data by index.
   */
  async getAppointmentByDataCreator(
    data_creator: string,
  ): Promise<AppointmentModel[]> {
    const index = createIndexDataCreator(
      data_creator
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) appointment by DataCreator index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setAppointmentByDataCreator(
    data_creator: string,
    data: AppointmentModel
  ): Promise<AppointmentModel[]> {
    const index = createIndexDataCreator(
      data_creator
    );

    const values = AppointmentModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete appointment by DataCreator index
   */
  async deleteAppointmentByDataCreator(
    data_creator: string
  ): Promise<void> {
    const index = createIndexDataCreator(
      data_creator
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get appointment by DataUpdater index
   * This function gets data by index.
   */
  async getAppointmentByDataUpdater(
    data_updater: string,
  ): Promise<AppointmentModel[]> {
    const index = createIndexDataUpdater(
      data_updater
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) appointment by DataUpdater index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setAppointmentByDataUpdater(
    data_updater: string,
    data: AppointmentModel
  ): Promise<AppointmentModel[]> {
    const index = createIndexDataUpdater(
      data_updater
    );

    const values = AppointmentModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete appointment by DataUpdater index
   */
  async deleteAppointmentByDataUpdater(
    data_updater: string
  ): Promise<void> {
    const index = createIndexDataUpdater(
      data_updater
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get appointment by TimeWindowId index
   * This function gets data by index.
   */
  async getAppointmentByTimeWindowId(
    time_window_id: string,
  ): Promise<AppointmentModel[]> {
    const index = createIndexTimeWindowId(
      time_window_id
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) appointment by TimeWindowId index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setAppointmentByTimeWindowId(
    time_window_id: string,
    data: AppointmentModel
  ): Promise<AppointmentModel[]> {
    const index = createIndexTimeWindowId(
      time_window_id
    );

    const values = AppointmentModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete appointment by TimeWindowId index
   */
  async deleteAppointmentByTimeWindowId(
    time_window_id: string
  ): Promise<void> {
    const index = createIndexTimeWindowId(
      time_window_id
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get appointment by PatientId index
   * This function gets data by index.
   */
  async getAppointmentByPatientId(
    patient_id: string,
  ): Promise<AppointmentModel[]> {
    const index = createIndexPatientId(
      patient_id
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) appointment by PatientId index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setAppointmentByPatientId(
    patient_id: string,
    data: AppointmentModel
  ): Promise<AppointmentModel[]> {
    const index = createIndexPatientId(
      patient_id
    );

    const values = AppointmentModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete appointment by PatientId index
   */
  async deleteAppointmentByPatientId(
    patient_id: string
  ): Promise<void> {
    const index = createIndexPatientId(
      patient_id
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get appointment by ClinicianId index
   * This function gets data by index.
   */
  async getAppointmentByClinicianId(
    clinician_id: string,
  ): Promise<AppointmentModel[]> {
    const index = createIndexClinicianId(
      clinician_id
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) appointment by ClinicianId index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setAppointmentByClinicianId(
    clinician_id: string,
    data: AppointmentModel
  ): Promise<AppointmentModel[]> {
    const index = createIndexClinicianId(
      clinician_id
    );

    const values = AppointmentModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete appointment by ClinicianId index
   */
  async deleteAppointmentByClinicianId(
    clinician_id: string
  ): Promise<void> {
    const index = createIndexClinicianId(
      clinician_id
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get appointment by Status index
   * This function gets data by index.
   */
  async getAppointmentByStatus(
    status: AppointmentStatus,
  ): Promise<AppointmentModel[]> {
    const index = createIndexStatus(
      status
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) appointment by Status index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setAppointmentByStatus(
    status: AppointmentStatus,
    data: AppointmentModel
  ): Promise<AppointmentModel[]> {
    const index = createIndexStatus(
      status
    );

    const values = AppointmentModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete appointment by Status index
   */
  async deleteAppointmentByStatus(
    status: AppointmentStatus
  ): Promise<void> {
    const index = createIndexStatus(
      status
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get appointment by ScheduledDate index
   * This function gets data by index.
   */
  async getAppointmentByScheduledDate(
    scheduled_date: string,
  ): Promise<AppointmentModel[]> {
    const index = createIndexScheduledDate(
      scheduled_date
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) appointment by ScheduledDate index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setAppointmentByScheduledDate(
    scheduled_date: string,
    data: AppointmentModel
  ): Promise<AppointmentModel[]> {
    const index = createIndexScheduledDate(
      scheduled_date
    );

    const values = AppointmentModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete appointment by ScheduledDate index
   */
  async deleteAppointmentByScheduledDate(
    scheduled_date: string
  ): Promise<void> {
    const index = createIndexScheduledDate(
      scheduled_date
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get appointment by GoogleCalendarEventId index
   * This function gets data by index.
   */
  async getAppointmentByGoogleCalendarEventId(
    google_calendar_event_id: string,
  ): Promise<AppointmentModel[]> {
    const index = createIndexGoogleCalendarEventId(
      google_calendar_event_id
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) appointment by GoogleCalendarEventId index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setAppointmentByGoogleCalendarEventId(
    google_calendar_event_id: string,
    data: AppointmentModel
  ): Promise<AppointmentModel[]> {
    const index = createIndexGoogleCalendarEventId(
      google_calendar_event_id
    );

    const values = AppointmentModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete appointment by GoogleCalendarEventId index
   */
  async deleteAppointmentByGoogleCalendarEventId(
    google_calendar_event_id: string
  ): Promise<void> {
    const index = createIndexGoogleCalendarEventId(
      google_calendar_event_id
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get appointment by PatientIdStatus index
   * This function gets data by index.
   */
  async getAppointmentByPatientIdStatus(
    patient_id: string,
    status: AppointmentStatus,
  ): Promise<AppointmentModel[]> {
    const index = createIndexPatientIdStatus(
      patient_id,
      status
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) appointment by PatientIdStatus index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setAppointmentByPatientIdStatus(
    patient_id: string,
    status: AppointmentStatus,
    data: AppointmentModel
  ): Promise<AppointmentModel[]> {
    const index = createIndexPatientIdStatus(
      patient_id,
      status
    );

    const values = AppointmentModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete appointment by PatientIdStatus index
   */
  async deleteAppointmentByPatientIdStatus(
    patient_id: string,
    status: AppointmentStatus
  ): Promise<void> {
    const index = createIndexPatientIdStatus(
      patient_id,
      status
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get appointment by ClinicianIdStatus index
   * This function gets data by index.
   */
  async getAppointmentByClinicianIdStatus(
    clinician_id: string,
    status: AppointmentStatus,
  ): Promise<AppointmentModel[]> {
    const index = createIndexClinicianIdStatus(
      clinician_id,
      status
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) appointment by ClinicianIdStatus index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setAppointmentByClinicianIdStatus(
    clinician_id: string,
    status: AppointmentStatus,
    data: AppointmentModel
  ): Promise<AppointmentModel[]> {
    const index = createIndexClinicianIdStatus(
      clinician_id,
      status
    );

    const values = AppointmentModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete appointment by ClinicianIdStatus index
   */
  async deleteAppointmentByClinicianIdStatus(
    clinician_id: string,
    status: AppointmentStatus
  ): Promise<void> {
    const index = createIndexClinicianIdStatus(
      clinician_id,
      status
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }
  /**
   * Get appointment by ClinicianIdScheduledDate index
   * This function gets data by index.
   */
  async getAppointmentByClinicianIdScheduledDate(
    clinician_id: string,
    scheduled_date: string,
  ): Promise<AppointmentModel[]> {
    const index = createIndexClinicianIdScheduledDate(
      clinician_id,
      scheduled_date
    );

    const response = await this.client.get({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Set (update) appointment by ClinicianIdScheduledDate index
   * This function replaces data, so the data must be complete.
   * Must keep `id`, `data_creator`, `create_time` unchanged as original data (as fetched).
   * DO NOT SET `data_updater` and `update_time` since backend will fill it automatically.
   * It will respond the set record, with `data_updater` and `update_time` filled by backend.
   */
  async setAppointmentByClinicianIdScheduledDate(
    clinician_id: string,
    scheduled_date: string,
    data: AppointmentModel
  ): Promise<AppointmentModel[]> {
    const index = createIndexClinicianIdScheduledDate(
      clinician_id,
      scheduled_date
    );

    const values = AppointmentModelToValues(data);
    const structuredData = CreateData(values);

    const response = await this.client.set({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      data: structuredData,
      format: {
        structured: true
      }
    });

    return this.resultToData(response.data?.values || []);
  }

  /**
   * Delete appointment by ClinicianIdScheduledDate index
   */
  async deleteAppointmentByClinicianIdScheduledDate(
    clinician_id: string,
    scheduled_date: string
  ): Promise<void> {
    const index = createIndexClinicianIdScheduledDate(
      clinician_id,
      scheduled_date
    );

    await this.client.delete({
      id: this.entityId,
      namespace: this.namespace,
      name: this.entityName,
      version: this.entityVersion,
      task: this.taskId,
      index: index,
      format: {
        structured: true
      }
    });
  }

  /**
   * Convert result data to AppointmentModel data array
   */
  private resultToData(values: Data[]): AppointmentModel[] {
    return values.map((item: Data) => {
      if (item.structured && item.structured.length > 0) {
        return AppointmentModelFromValues(item.structured);
      }

      if (item.serialized) {
        try {
          const parsedData = JSON.parse(item.serialized) as AppointmentModel;
          return parsedData;
        } catch (error) {
          console.error('Error parsing serialized AppointmentModel data: ', error, item.serialized);
          return null;
        }
      }

      return null;
    }).filter((item): item is AppointmentModel => item !== null);
  }
}

/**
 * Convert AppointmentModel data to Value array
 */
function AppointmentModelToValues(data: AppointmentModel): Value[] {
  const fieldMappings = [
    { key: 'id', type: DataType.string, defaultValue: '' },
    { key: 'data_creator', type: DataType.string, defaultValue: '' },
    { key: 'data_updater', type: DataType.string, defaultValue: '' },
    { key: 'create_time', type: DataType.string, defaultValue: '' },
    { key: 'update_time', type: DataType.string, defaultValue: '' },
    { key: 'time_window_id', type: DataType.string, defaultValue: '' },
    { key: 'patient_id', type: DataType.string, defaultValue: '' },
    { key: 'clinician_id', type: DataType.string, defaultValue: '' },
    { key: 'procedure_ids', type: DataType.array, defaultValue: [] },
    { key: 'scheduled_date', type: DataType.string, defaultValue: '' },
    { key: 'duration_minutes', type: DataType.number, defaultValue: 0 },
    { key: 'location', type: DataType.string, defaultValue: null },
    { key: 'notes', type: DataType.string, defaultValue: null },
    { key: 'status', type: DataType.enumeration, defaultValue: 0 },
    { key: 'google_calendar_event_id', type: DataType.string, defaultValue: null },
    { key: 'reminders_sent', type: DataType.string, defaultValue: null },
  ];

  return fieldMappings.map(({ key, type, defaultValue }) => {
    const value = data[key as keyof AppointmentModel] ?? defaultValue;
    return CreateValue(type, value, key);
  });
}

/**
 * Convert Value array to AppointmentModel data
 */
function AppointmentModelFromValues(values: Value[]): AppointmentModel {
  const data: Partial<AppointmentModel> = {};
  
  for (const value of values) {
    if (!value.name) continue;
    
    switch (value.name) {
      case 'id':
        data.id = ParseValue(value, DataType.string) as string;
        break;
      case 'data_creator':
        data.data_creator = ParseValue(value, DataType.string) as string;
        break;
      case 'data_updater':
        data.data_updater = ParseValue(value, DataType.string) as string;
        break;
      case 'create_time':
        data.create_time = ParseValue(value, DataType.string) as string;
        break;
      case 'update_time':
        data.update_time = ParseValue(value, DataType.string) as string;
        break;
      case 'time_window_id':
        data.time_window_id = ParseValue(value, DataType.string) as string;
        break;
      case 'patient_id':
        data.patient_id = ParseValue(value, DataType.string) as string;
        break;
      case 'clinician_id':
        data.clinician_id = ParseValue(value, DataType.string) as string;
        break;
      case 'procedure_ids':
        data.procedure_ids = ParseValue(value, DataType.array) as string[];
        break;
      case 'scheduled_date':
        data.scheduled_date = ParseValue(value, DataType.string) as string;
        break;
      case 'duration_minutes':
        data.duration_minutes = ParseValue(value, DataType.number) as number;
        break;
      case 'location':
        data.location = ParseValue(value, DataType.string) as string | null;
        break;
      case 'notes':
        data.notes = ParseValue(value, DataType.string) as string | null;
        break;
      case 'status':
        data.status = ParseValue(value, DataType.enumeration) as AppointmentStatus;
        break;
      case 'google_calendar_event_id':
        data.google_calendar_event_id = ParseValue(value, DataType.string) as string | null;
        break;
      case 'reminders_sent':
        data.reminders_sent = ParseValue(value, DataType.string) as string | null;
        break;
    }
  }
  
  return data as AppointmentModel;
}


/**
 * Create index for Id fields
 */
function createIndexId(
  id: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, id, 'id'),
  ];

  return {
    fields: ['id'],
    values
  };
}
/**
 * Create index for DataCreator fields
 */
function createIndexDataCreator(
  data_creator: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, data_creator, 'data_creator'),
  ];

  return {
    fields: ['data_creator'],
    values
  };
}
/**
 * Create index for DataUpdater fields
 */
function createIndexDataUpdater(
  data_updater: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, data_updater, 'data_updater'),
  ];

  return {
    fields: ['data_updater'],
    values
  };
}
/**
 * Create index for TimeWindowId fields
 */
function createIndexTimeWindowId(
  time_window_id: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, time_window_id, 'time_window_id'),
  ];

  return {
    fields: ['time_window_id'],
    values
  };
}
/**
 * Create index for PatientId fields
 */
function createIndexPatientId(
  patient_id: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, patient_id, 'patient_id'),
  ];

  return {
    fields: ['patient_id'],
    values
  };
}
/**
 * Create index for ClinicianId fields
 */
function createIndexClinicianId(
  clinician_id: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, clinician_id, 'clinician_id'),
  ];

  return {
    fields: ['clinician_id'],
    values
  };
}
/**
 * Create index for Status fields
 */
function createIndexStatus(
  status: AppointmentStatus
): Index {
  const values: Value[] = [
    CreateValue(DataType.enumeration, status, 'status'),
  ];

  return {
    fields: ['status'],
    values
  };
}
/**
 * Create index for ScheduledDate fields
 */
function createIndexScheduledDate(
  scheduled_date: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, scheduled_date, 'scheduled_date'),
  ];

  return {
    fields: ['scheduled_date'],
    values
  };
}
/**
 * Create index for GoogleCalendarEventId fields
 */
function createIndexGoogleCalendarEventId(
  google_calendar_event_id: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, google_calendar_event_id, 'google_calendar_event_id'),
  ];

  return {
    fields: ['google_calendar_event_id'],
    values
  };
}
/**
 * Create index for PatientIdStatus fields
 */
function createIndexPatientIdStatus(
  patient_id: string,
  status: AppointmentStatus
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, patient_id, 'patient_id'),
    CreateValue(DataType.enumeration, status, 'status'),
  ];

  return {
    fields: ['patient_id', 'status'],
    values
  };
}
/**
 * Create index for ClinicianIdStatus fields
 */
function createIndexClinicianIdStatus(
  clinician_id: string,
  status: AppointmentStatus
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, clinician_id, 'clinician_id'),
    CreateValue(DataType.enumeration, status, 'status'),
  ];

  return {
    fields: ['clinician_id', 'status'],
    values
  };
}
/**
 * Create index for ClinicianIdScheduledDate fields
 */
function createIndexClinicianIdScheduledDate(
  clinician_id: string,
  scheduled_date: string
): Index {
  const values: Value[] = [
    CreateValue(DataType.string, clinician_id, 'clinician_id'),
    CreateValue(DataType.string, scheduled_date, 'scheduled_date'),
  ];

  return {
    fields: ['clinician_id', 'scheduled_date'],
    values
  };
}

export default AppointmentORM;